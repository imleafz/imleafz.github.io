<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>一叶方舟</title><link>https://leafz.net/</link><description>Recent content on 一叶方舟</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>本站遵循 CC-BY-NC 4.0 协议。</copyright><lastBuildDate>Wed, 15 Nov 2017 00:32:01 +0800</lastBuildDate><atom:link href="https://leafz.net/index.xml" rel="self" type="application/rss+xml"/><item><title>Bash 脚本 set 命令教程（转）</title><link>https://leafz.net/2017/11/15/bash-set-command/</link><pubDate>Wed, 15 Nov 2017 00:32:01 +0800</pubDate><guid>https://leafz.net/2017/11/15/bash-set-command/</guid><description>一叶方舟 https://leafz.net/2017/11/15/bash-set-command/ -&lt;p>服务器的开发和管理离不开 Bash 脚本，掌握它需要学习大量的细节。&lt;/p>
&lt;p>&lt;code>set&lt;/code> 命令是 Bash 脚本的重要环节，却常常被忽视，导致脚本的安全性和可维护性出问题。本文介绍它的基本用法，让你可以更安心地使用 Bash 脚本。&lt;/p>
&lt;h2 id="一简介">一、简介&lt;/h2>
&lt;p>我们知道，Bash 执行脚本的时候，会创建一个新的 Shell。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ bash script.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码中，&lt;code>script.sh&lt;/code> 是在一个新的 Shell 里面执行。这个 Shell 就是脚本的执行环境，Bash 默认给定了这个环境的各种参数。&lt;/p>
&lt;p>&lt;code>set&lt;/code> 命令用来修改 Shell 环境的运行参数，也就是可以定制环境。一共有十几个参数可以定制，&lt;a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html">官方手册&lt;/a>有完整清单，本文介绍其中最常用的四个。&lt;/p>
&lt;p>顺便提一下，如果命令行下不带任何参数，直接运行 &lt;code>set&lt;/code>，会显示所有的环境变量和 Shell 函数。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ set
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="二set--u">二、set -u&lt;/h2>
&lt;p>执行脚本的时候，如果遇到不存在的变量，Bash 默认忽略它。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">echo $a
echo bar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码中，&lt;code>$a&lt;/code> 是一个不存在的变量。执行结果如下。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ bash script.sh
bar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，&lt;code>echo $a&lt;/code> 输出了一个空行，Bash 忽略了不存在的 &lt;code>$a&lt;/code>，然后继续执行 &lt;code>echo bar&lt;/code>。大多数情况下，这不是开发者想要的行为，遇到变量不存在，脚本应该报错，而不是一声不响地往下执行。&lt;/p>
&lt;p>&lt;code>set -u&lt;/code> 就用来改变这种行为。脚本在头部加上它，遇到不存在的变量就会报错，并停止执行。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">set -u
echo $a
echo bar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果如下。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ bash script.sh
bash: script.sh:行4: a: 未绑定的变量
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，脚本报错了，并且不再执行后面的语句。&lt;/p>
&lt;p>&lt;code>-u&lt;/code> 还有另一种写法 &lt;code>-o nounset&lt;/code>，两者是等价的。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">set -o nounset
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="三set--x">三、set -x&lt;/h2>
&lt;p>默认情况下，脚本执行后，屏幕只显示运行结果，没有其他内容。如果多个命令连续执行，它们的运行结果就会连续输出。有时会分不清，某一段内容是什么命令产生的。&lt;/p>
&lt;p>&lt;code>set -x&lt;/code> 用来在运行结果之前，先输出执行的那一行命令。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">set -x
echo bar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行上面的脚本，结果如下。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ bash script.sh
+ echo bar
bar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，执行 &lt;code>echo bar&lt;/code> 之前，该命令会先打印出来，行首以 &lt;code>+&lt;/code> 表示。这对于调试复杂的脚本是很有用的。&lt;/p>
&lt;p>&lt;code>-x&lt;/code> 还有另一种写法 &lt;code>-o xtrace&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">set -o xtrace
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="四bash-的错误处理">四、Bash 的错误处理&lt;/h2>
&lt;p>如果脚本里面有运行失败的命令（返回值非 0），Bash 默认会继续执行后面的命令。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">foo
echo bar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面脚本中，&lt;code>foo&lt;/code> 是一个不存在的命令，执行时会报错。但是，Bash 会忽略这个错误，继续往下执行。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ bash script.sh
script.sh:行3: foo: 未找到命令
bar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，Bash 只是显示有错误，并没有终止执行。&lt;/p>
&lt;p>这种行为很不利于脚本安全和除错。实际开发中，如果某个命令失败，往往需要脚本停止执行，防止错误累积。这时，一般采用下面的写法。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">command &lt;span style="color:#f92672">||&lt;/span> exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的写法表示只要 &lt;code>command&lt;/code> 有非零返回值，脚本就会停止执行。&lt;/p>
&lt;p>如果停止执行之前需要完成多个操作，就要采用下面三种写法。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">command &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#f92672">{&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;command failed&amp;#34;&lt;/span>; exit 1; &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> ! command; &lt;span style="color:#66d9ef">then&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;command failed&amp;#34;&lt;/span>; exit 1; &lt;span style="color:#66d9ef">fi&lt;/span>
command
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$?&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -ne &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;command failed&amp;#34;&lt;/span>; exit 1; &lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>另外，除了停止执行，还有一种情况。如果两个命令有继承关系，只有第一个命令成功了，才能继续执行第二个命令，那么就要采用下面的写法。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">command1 &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> command2
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="五set--e">五、set -e&lt;/h2>
&lt;p>上面这些写法多少有些麻烦，容易疏忽。&lt;code>set -e&lt;/code> 从根本上解决了这个问题，它使得脚本只要发生错误，就终止执行。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">set -e
foo
echo bar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行结果如下。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ bash script.sh
script.sh:行4: foo: 未找到命令
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，第 4 行执行失败以后，脚本就终止执行了。&lt;/p>
&lt;p>&lt;code>set -e&lt;/code> 根据返回值来判断，一个命令是否运行失败。但是，某些命令的非零返回值可能不表示失败，或者开发者希望在命令失败的情况下，脚本继续执行下去。这时可以暂时关闭 &lt;code>set -e&lt;/code>，该命令执行结束后，再重新打开 &lt;code>set -e&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">set +e
command1
command2
set -e
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码中，&lt;code>set +e&lt;/code> 表示关闭 &lt;code>-e&lt;/code> 选项，&lt;code>set -e&lt;/code> 表示重新打开 &lt;code>-e&lt;/code> 选项。&lt;/p>
&lt;p>还有一种方法是使用 &lt;code>command || true&lt;/code>，使得该命令即使执行失败，脚本也不会终止执行。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">set -e
foo &lt;span style="color:#f92672">||&lt;/span> true
echo bar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码中，&lt;code>true&lt;/code> 使得这一行语句总是会执行成功，后面的 &lt;code>echo bar&lt;/code> 会执行。&lt;/p>
&lt;p>&lt;code>-e&lt;/code> 还有另一种写法 &lt;code>-o errexit&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">set -o errexit
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="六set--o-pipefail">六、set -o pipefail&lt;/h2>
&lt;p>&lt;code>set -e&lt;/code> 有一个例外情况，就是不适用于管道命令。&lt;/p>
&lt;p>所谓管道命令，就是多个子命令通过管道运算符（&lt;code>|&lt;/code>）组合成为一个大的命令。Bash 会把最后一个子命令的返回值，作为整个命令的返回值。也就是说，只要最后一个子命令不失败，管道命令总是会执行成功，因此它后面命令依然会执行，&lt;code>set -e&lt;/code> 就失效了。&lt;/p>
&lt;p>请看下面这个例子。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">set -e
foo | echo a
echo bar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行结果如下。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ bash script.sh
a
script.sh:行4: foo: 未找到命令
bar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码中，&lt;code>foo&lt;/code> 是一个不存在的命令，但是 &lt;code>foo | echo a&lt;/code> 这个管道命令会执行成功，导致后面的 &lt;code>echo bar&lt;/code> 会继续执行。&lt;/p>
&lt;p>&lt;code>set -o pipefail&lt;/code> 用来解决这种情况，只要一个子命令失败，整个管道命令就失败，脚本就会终止执行。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">set -eo pipefail
foo | echo a
echo bar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行后，结果如下。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ bash script.sh
a
script.sh:行4: foo: 未找到命令
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，&lt;code>echo bar&lt;/code> 没有执行。&lt;/p>
&lt;h2 id="七总结">七、总结&lt;/h2>
&lt;p>&lt;code>set&lt;/code> 命令的上面这四个参数，一般都放在一起使用。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">set -euxo pipefail
set -eux
set -o pipefail
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这两种写法建议放在所有 Bash 脚本的头部。&lt;/p>
&lt;p>另一种办法是在执行 Bash 脚本的时候，从命令行传入这些参数。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ bash -euxo pipefail script.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="八参考链接">八、参考链接&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html">The Set Builtin&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/">Safer bash scripts with &amp;lsquo;set -euxo pipefail&amp;rsquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.davidpashley.com/articles/writing-robust-shell-scripts/">Writing Robust Bash Shell Scripts&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>转自：阮一峰的网络日志 &lt;a href="http://www.ruanyifeng.com/blog/2017/11/bash-set.html">http://www.ruanyifeng.com/blog/2017/11/bash-set.html&lt;/a>&lt;/p>
- https://leafz.net/2017/11/15/bash-set-command/ - 本站遵循 CC-BY-NC 4.0 协议。</description></item><item><title>电钢琴录音测试</title><link>https://leafz.net/2015/05/22/e-piano-recording-test/</link><pubDate>Fri, 22 May 2015 00:30:00 +0800</pubDate><guid>https://leafz.net/2015/05/22/e-piano-recording-test/</guid><description>一叶方舟 https://leafz.net/2015/05/22/e-piano-recording-test/ -&lt;h2 id="音频线缆35mm-公对公">音频线缆（3.5mm 公对公）&lt;/h2>
&lt;p>买了 3.5mm-to-3.5mm 的音频线，终于可以直接内录电钢的声音了:)&lt;/p>
&lt;h2 id="录音成果渣弹奏轻喷">录音成果：（渣弹奏，轻喷~）&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Canon in D &lt;code>弹错几个音&lt;/code>&lt;/p>
&lt;audio controls style="width: 80%; margin-bottom: 20px">
&lt;source src="http://imleafz.u.qiniudn.com/blog/music/imleafz_canon_vbr.mp3" type="audio/mpeg">
Your browser does not support the audio element.
&lt;/audio>
&lt;/li>
&lt;li>
&lt;p>Always with me &lt;code>这首比较完美了&lt;/code>&lt;/p>
&lt;audio controls style="width: 80%; margin-bottom: 20px">
&lt;source src="http://imleafz.u.qiniudn.com/blog/music/imleafz_alwayswithme_vbr.mp3" type="audio/mpeg">
Your browser does not support the audio element.
&lt;/audio>
&lt;/li>
&lt;li>
&lt;p>View of silence &lt;code>正在练，目前只弹到一半……&lt;/code>&lt;/p>
&lt;audio controls style="width: 80%; margin-bottom: 20px">
&lt;source src="http://imleafz.u.qiniudn.com/blog/music/imleafz_viewofsilence_vbr.mp3" type="audio/mpeg">
Your browser does not support the audio element.
&lt;/audio>
&lt;/li>
&lt;/ul>
- https://leafz.net/2015/05/22/e-piano-recording-test/ - 本站遵循 CC-BY-NC 4.0 协议。</description></item></channel></rss>